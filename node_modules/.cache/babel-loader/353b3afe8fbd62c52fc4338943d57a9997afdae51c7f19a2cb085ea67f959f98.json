{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AppContext=/*#__PURE__*/createContext();export const AppProvider=_ref=>{let{children}=_ref;const[isDarkMode,setIsDarkMode]=useState(false);const[isLoading,setIsLoading]=useState(false);const[user,setUser]=useState(null);const[notifications,setNotifications]=useState([]);useEffect(()=>{// Check for saved theme preference\nconst savedTheme=localStorage.getItem('theme');if(savedTheme){setIsDarkMode(savedTheme==='dark');}else{// Check system preference\nconst prefersDark=window.matchMedia('(prefers-color-scheme: dark)').matches;setIsDarkMode(prefersDark);}},[]);useEffect(()=>{// Apply theme\nif(isDarkMode){document.documentElement.classList.add('dark');localStorage.setItem('theme','dark');}else{document.documentElement.classList.remove('dark');localStorage.setItem('theme','light');}},[isDarkMode]);const toggleDarkMode=()=>{setIsDarkMode(!isDarkMode);};const addNotification=function(message){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'info';const id=Date.now();setNotifications(prev=>[...prev,{id,message,type}]);setTimeout(()=>{setNotifications(prev=>prev.filter(n=>n.id!==id));},5000);};const value={isDarkMode,toggleDarkMode,isLoading,setIsLoading,user,setUser,notifications,addNotification};return/*#__PURE__*/_jsx(AppContext.Provider,{value:value,children:children});};export const useApp=()=>{const context=useContext(AppContext);if(context===undefined){throw new Error('useApp must be used within an AppProvider');}return context;};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}